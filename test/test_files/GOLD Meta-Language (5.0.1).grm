!-----------------------------------------------------------------------------------
! Reconstructed by @IntUnsigned GOLD grammar v2.0.5 for GOLD Parser Builder v5.2.0
! binary compatable
! GOLD Parser license http://www.goldparser.org/about/license.htm
!-----------------------------------------------------------------------------------
! GOLD Meta-Language
!
! This is the very simple grammar used to define grammars using the GOLD Parser.
! The grammar was revised for version 2.0.5 of the GOLD Parser Builder. The changes
! were designed to:
!
!   1. Make it easier to use line comments to disable individual rules. 
!   2. Allow the developer to use optional newlines for readability.
! 
! www.devincook.com/goldparser 
! -----------------------------------------------------------------------------------

!------------------------------------------------------------------------------------
!TODO	Gold not accept national symbols in comments !!! 
!------------------------------------------------------------------------------------
 

"Name"         		= 'GOLD Meta-Language'
"Version"      		= '5.0.1'
"Author"       		= 'Devin Cook'
"About"        		= 'This grammar defines the GOLD Meta-Language.'
"Character Set"		= 'Unicode'
"Character Mapping" = 'Windows-1252'
"Generated By"		= 'GOLD Parser Builder 5.0 RC'

"Start Symbol" 		= <Grammar>


! The token definitions are very complex. Many definitions allow an 
! "Override Sequence" such as the backslash in C. In this case, it is 
! single quotes. Not all the tokens have overrides. I only added them where
! their use could be justified.


! ====================================================================
! Special Terminals
! ====================================================================

{Parameter Ch}   	= {All Latin} + {Digit} + {Space} - ["] - ['']
{Nonterminal Ch} 	= {All Latin} + {Digit} + [_-] + {Space} 
{Terminal Ch}  		= {Digit} + {All Latin} + [_-] 
{Literal Ch}     	= {All Printable}    - ['']       !Basically anything, DO NOT CHANGE!
{Set Literal Ch} 	= {All Printable}    - ['['']'] - ['']

ParameterName  	= '"' {Parameter Ch}+ '"' 
Nonterminal    	= '<' {Nonterminal Ch}+ '>'
SetLiteral     	= '[' ({Set Literal Ch} | '' {Literal Ch}* '' )+ ']'

!Decimal values are denoted by a number-sign prefix (#)
DecNumber		= '#' {Digit}+

!Hexadecimal values are denoted by an ampersand (&)
{Hex Char}     	= {Digit} + [abcdef] + [ABCDEF] 
HexNumber		= '&' {Hex Char}+

Identifier   	= {Terminal Ch}+
Literal 		= '' {Literal Ch}* ''


! ====================================================================
! Line-Based Grammar Declarations
! ====================================================================

{Whitespace Ch} = {All Whitespace} - {CR} - {LF} - {&2028} - {&2029}
Whitespace 		= {Whitespace Ch}+

Newline    		= {CR} | {LF} | {&2028} | {&2029} | {CR}{LF} 


! ====================================================================
! Comments
! ====================================================================

Comment Line  = '!'
Comment Start = '!*'
Comment End   = '*!'

Comment Block @= { Nesting = All, Advance = Character }


! ====================================================================
! Rules
! ====================================================================

<Grammar>  		::= <nlo> <Content>     ! The <nlo> here removes all newlines before the first definition

<Content> 		::= <Content> <Definition> 
            	| 	<Definition>
                
<Definition> 	::= <Param>
				| 	<Attribute Decl>
				| 	<Set Decl>
				| 	<Group Decl>
				| 	<Terminal Decl>
				| 	<Rule Decl>

! Optional series of New Line - use below is restricted
<nlo> 			::= NewLine <nlo>
           		|	! nothing

! One or more New Lines
<nl> 			::= NewLine  <nl>
       			| 	NewLine 


! ====================================================================
! Terminal Definition
! ====================================================================

<Terminal Name> ::= Identifier
				| 	Literal


! ====================================================================
! Parameter Definition
! ====================================================================

<Value List> 	::= <Value List> ',' <nlo> <Value Items>
				| 	<Value Items>

<Value Items> 	::= <Value Items> <Value Item>
				|	<Value Item>

<Value Item> 	::= Identifier
				|	Nonterminal
				| 	Literal

<Param> 		::= ParameterName <nlo> '=' <Param Body> <nl>

<Param Body> 	::= <Param Body> <nlo> '|' <Value List>
				| 	<Value List>


! ====================================================================
! Attributes Definition
! ====================================================================

<Attribute Decl> 	::= <Terminal Name> <nlo> '@=' '{' <Attribute List> '}' <nl>
					| 	<Terminal Name> Identifier <nlo> '@=' '{' <Attribute List> '}' <nl>

<Attribute List> 	::= <Attribute List> ',' <nlo> <Attribute Item>
					| 	<Attribute Item>

<Attribute Item> 	::= Identifier '=' Identifier
					| Identifier '=' '{' <Value List> '}'


! ====================================================================
! Set Definition
! ====================================================================

<Set Decl> 			::= '{' <ID Series> '}' <nlo> '=' <Set Exp> <nl>

<Set Exp> 			::= <Set Exp> <nlo> '+' <Set Item>
					| 	<Set Exp> <nlo> '-' <Set Item>
					| 	<Set Item>

<Set Item> 			::= SetLiteral
					| 	'{' <ID Series> '}'
					| 	'{' <Charcode List> '}'

<ID Series> 		::= <ID Series> Identifier
					| Identifier

<Charcode List> 	::= <Charcode List> ',' <nlo> <Charcode Item>
					| 	<Charcode Item>

<Charcode Item> 	::= <Charcode Value>
					| 	<Charcode Value> '..' <Charcode Value>

<Charcode Value> 	::= HexNumber
					| 	DecNumber


! ====================================================================
! Group Definition
! ====================================================================

<Group Decl> 		::= <Terminal Name> Identifier <nlo> '=' <Group Item> <nl>

<Group Item> 		::= Identifier
					| 	Literal


! ====================================================================
! Terminal Definition
! ====================================================================

<Terminal Decl> 	::= <Terminal Name> <nlo> '=' <Terminal Body> <nl>

<Terminal Body> 	::= <Terminal Body> <nlo> '|' <Reg Exp Seq>
					| 	<Reg Exp Seq>

<Reg Exp Seq> 		::= <Reg Exp Seq> <Reg Exp Item>
					| 	<Reg Exp Item>

<Reg Exp Item> 		::= <Set Item> <Kleene Opt>
					| 	Literal <Kleene Opt>
					| 	Identifier <Kleene Opt>
					| 	'(' <Sub Reg Exp> ')' <Kleene Opt>

<Sub Reg Exp> 		::= <Sub Reg Exp> '|' <Reg Exp Seq>
					| 	<Reg Exp Seq>

<Kleene Opt> 		::= '+'
					| 	'?'
					| 	'*'
					|	!nothing
             

! ====================================================================
! Rule Definition
! ====================================================================

<Rule Decl> 		::= Nonterminal <nlo> '::=' <Handles> <nl>

<Handles> 			::= <Handles> <nlo> '|' <Handle>
					| 	<Handle>

<Handle> 			::= <Symbols>
					| 	'<>'

<Symbols> 			::= <Symbols> <Symbol>
					|	! nothing

<Symbol> 			::= <Terminal Name>
					| 	Nonterminal

